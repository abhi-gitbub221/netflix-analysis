# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sf0-tv1kPg0Ry39J1_pv85H6gt4Sf0IO
"""

from google.colab import files
uploaded= files.upload()

import pandas as pd
df= pd.read_csv("netflix_titles.csv")
df.head()

# 📦 Step 1: Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# 🗂 Step 2: Load the dataset
df = pd.read_csv("netflix_titles.csv")

# 🧐 Step 3: Quick view of data
print("First 5 rows of dataset:")
print(df.head())
print("\nDataset Info:")
print(df.info())

# 📊 Step 4: 1. Number of Movies vs TV Shows
plt.figure(figsize=(6,4))
sns.countplot(data=df, x='type', palette='coolwarm')
plt.title('Number of Movies vs TV Shows')
plt.show()

# 📊 Step 5: 2. Most common genres
plt.figure(figsize=(10,6))
df['listed_in'].str.split(',').explode().value_counts().head(10).plot(kind='bar', color='skyblue')
plt.title('Top 10 Most Common Genres')
plt.ylabel('Count')
plt.show()

# 📊 Step 6: 3. Top 10 countries with most content
plt.figure(figsize=(10,6))
df['country'].value_counts().head(10).plot(kind='bar', color='lightgreen')
plt.title('Top 10 Countries with Most Content')
plt.ylabel('Count')
plt.show()

# 📊 Step 7: 4. Releases per year
plt.figure(figsize=(12,6))
df['release_year'].value_counts().sort_index().plot(kind='line', marker='o', color='orange')
plt.title('Number of Releases per Year')
plt.xlabel('Year')
plt.ylabel('Count')
plt.show()

# 📊 Step 8: 5. Director with most titles
plt.figure(figsize=(10,6))
df['director'].value_counts().dropna().head(10).plot(kind='bar', color='purple')
plt.title('Top 10 Directors by Number of Titles')
plt.ylabel('Count')
plt.show()

# 📊 Step 9: 6. Longest movies/shows
if 'duration' in df.columns:
    print("\nTop 10 Longest Movies/Shows:")
    print(df[['title', 'duration']].head(10))

# 📊 Step 10: 7. Content added to Netflix over time
df['date_added'] = pd.to_datetime(df['date_added'])
df['year_added'] = df['date_added'].dt.year
plt.figure(figsize=(12,6))
df['year_added'].value_counts().sort_index().plot(kind='bar', color='red')
plt.title('Content Added to Netflix Over Time')
plt.ylabel('Count')
plt.show()

# ----------------------------
# Netflix Professional Analysis
# Single cell: copy → paste → run
# ----------------------------

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from textwrap import fill

# ----------------------------
# 0. Settings
# ----------------------------
FNAME = "netflix_titles.csv"   # <-- change if your filename differs
VIS_DIR = "visuals"
os.makedirs(VIS_DIR, exist_ok=True)
sns.set(style="whitegrid")

# ----------------------------
# 1. Load dataset
# ----------------------------
df = pd.read_csv(FNAME)
print("Loaded dataset: rows =", df.shape[0], "columns =", df.shape[1], "\n")

# ----------------------------
# 2. Quick look & cleaning helpers
# ----------------------------
display(df.head(3))
print("\nColumn names:", list(df.columns), "\n")
print("Basic info:")
print(df.info(), "\n")

# Normalize column names to expected names if several variants exist
# (we'll refer to: type, title, country, listed_in, director, date_added, release_year, duration, rating)
cols = {c.lower(): c for c in df.columns}
# helper to get actual column or None
def col(name):
    return cols.get(name.lower())

# alias mapping (if dataset used slightly different names)
col_type = col('type') or 'type'
col_title = col('title') or 'title'
col_country = col('country') or 'country'
col_listed = col('listed_in') or 'listed_in'
col_director = col('director') or 'director'
col_date_added = col('date_added') or 'date_added'
col_release_year = col('release_year') or 'release_year'
col_duration = col('duration') or 'duration'
col_rating = col('rating') or 'rating'  # NOTE: this is usually content-rating (PG-13), not review score

# Create working copy
dfw = df.copy()

# Fill NAs with placeholders for safe operations
for c in [col_country, col_listed, col_director, col_duration, col_rating]:
    if c in dfw.columns:
        dfw[c] = dfw[c].fillna("Unknown")

# Create primary_country (first country if multiple)
if col_country in dfw.columns:
    dfw['primary_country'] = dfw[col_country].astype(str).apply(lambda x: x.split(',')[0].strip() if x != "Unknown" else "Unknown")
else:
    dfw['primary_country'] = "Unknown"

# Explode genres (listed_in) into a long series for counting
if col_listed in dfw.columns:
    genres_series = dfw[col_listed].astype(str).str.split(',').explode().str.strip()
else:
    genres_series = pd.Series(dtype=str)

# Clean duration: try extract minutes or season counts
def parse_duration(x):
    if pd.isna(x):
        return np.nan
    s = str(x).strip()
    # common formats: "90 min", "1 Season", "2 Seasons", "100 min"
    if 'min' in s:
        try:
            return float(s.replace('min','').strip())
        except:
            return np.nan
    else:
        # return number of seasons * 45 as rough minute proxy (optional)
        try:
            num = float(s.split()[0])
            # assume Season -> convert to approximate minutes for comparison
            if 'season' in s.lower():
                return num * 45.0   # rough per-season minutes
            return np.nan
        except:
            return np.nan

if col_duration in dfw.columns:
    dfw['duration_mins'] = dfw[col_duration].apply(parse_duration)
else:
    dfw['duration_mins'] = np.nan

# Try to detect if there is a numeric "rating" (review score) column instead of content rating
numeric_rating_cols = [c for c in dfw.columns if pd.api.types.is_numeric_dtype(dfw[c])]
possible_score_cols = [c for c in dfw.columns if c.lower() in ('imdb_score','avg_vote','score','rating_score') or c.lower().endswith('_score')]
numeric_rating_col = None
if possible_score_cols:
    # prefer common names
    numeric_rating_col = possible_score_cols[0]
elif numeric_rating_cols:
    # if some numeric column looks like a score (0-10 or 0-100), pick small-range numeric column heuristically
    for c in numeric_rating_cols:
        vals = dfw[c].dropna()
        if len(vals)>0:
            mn, mx = vals.min(), vals.max()
            if 0 <= mn <= 1 and 1 <= mx <= 10:   # eg 0-10 scale
                numeric_rating_col = c
                break

# ----------------------------
# 3. Analysis pieces
# ----------------------------

# A. TV vs Movies by quantity
tv_movie_counts = dfw[col_type].value_counts()
print("\n--- A. TV vs Movies (by quantity) ---")
print(tv_movie_counts)
plt.figure(figsize=(6,4))
tv_movie_counts.plot(kind='pie', autopct='%1.1f%%', startangle=120, colors=['#66c2a5','#fc8d62'])
plt.title("TV Shows vs Movies (by count)")
plt.ylabel("")
plt.tight_layout()
plt.savefig(os.path.join(VIS_DIR, "tv_vs_movies_pie.png"))
plt.show()

# B. Countries producing the most titles (top 12)
top_countries = dfw['primary_country'].value_counts().head(12)
print("\n--- B. Top countries by content count (primary country) ---")
print(top_countries)
plt.figure(figsize=(10,5))
sns.barplot(x=top_countries.values, y=top_countries.index, palette="magma")
plt.title("Top Countries by Number of Netflix Titles (primary country)")
plt.xlabel("Number of Titles")
plt.tight_layout()
plt.savefig(os.path.join(VIS_DIR, "top_countries.png"))
plt.show()

# C. Most common genres overall
top_genres = genres_series.value_counts().head(12)
print("\n--- C. Top genres overall ---")
print(top_genres)
plt.figure(figsize=(10,5))
sns.barplot(x=top_genres.values, y=top_genres.index, palette="viridis")
plt.title("Top Genres on Netflix (by title count)")
plt.xlabel("Number of Titles")
plt.tight_layout()
plt.savefig(os.path.join(VIS_DIR, "top_genres.png"))
plt.show()

# D. Content added over time (date_added -> year)
if col_date_added in dfw.columns:
    # convert carefully
    dfw[col_date_added] = pd.to_datetime(dfw[col_date_added], errors='coerce')
    dfw['year_added'] = dfw[col_date_added].dt.year
    added_per_year = dfw['year_added'].value_counts().sort_index()
    print("\n--- D. Content added per year (year added) ---")
    print(added_per_year.tail(10))
    plt.figure(figsize=(12,4))
    added_per_year.plot(kind='bar', color='steelblue')
    plt.title("Content Added per Year")
    plt.ylabel("Count")
    plt.tight_layout()
    plt.savefig(os.path.join(VIS_DIR, "added_per_year.png"))
    plt.show()
else:
    print("\nNo 'date_added' column found or it couldn't be parsed. Skipping 'added per year' chart.")

# E. Country vs Country: who produces most hits (by count) - textual comparison
print("\n--- E. Country vs Country quick comparisons ---")
top3 = top_countries.head(3)
for i,(country,count) in enumerate(top3.items(), start=1):
    pct = (count / dfw.shape[0]) * 100
    print(f"{i}. {country}: {count} titles ({pct:.1f}% of dataset)")

# Comparison statement
if top_countries.shape[0] >= 2:
    c1, c2 = top_countries.index[0], top_countries.index[1]
    n1, n2 = top_countries.iloc[0], top_countries.iloc[1]
    diff = n1 - n2
    pct_more = (diff / n2) * 100 if n2>0 else np.nan
    print(f"\n{c1} produces {diff} more titles than {c2} (≈ {pct_more:.1f}% more).")

# F. Heatmap: Top countries vs top genres
print("\n--- F. Heatmap: top countries vs top genres ---")
top_country_list = list(top_countries.index[:8])
top_genre_list = list(top_genres.index[:8])
# build a country-genre matrix
mat = pd.DataFrame(0, index=top_country_list, columns=top_genre_list)
for country in top_country_list:
    sub = dfw[dfw['primary_country'] == country]
    gcounts = sub[col_listed].astype(str).str.split(',').explode().str.strip().value_counts()
    for g in top_genre_list:
        mat.loc[country, g] = gcounts.get(g, 0)
plt.figure(figsize=(10,6))
sns.heatmap(mat, annot=True, fmt='d', cmap='YlGnBu')
plt.title("Heatmap: Top Countries vs Top Genres (counts)")
plt.tight_layout()
plt.savefig(os.path.join(VIS_DIR, "country_genre_heatmap.png"))
plt.show()

# G. Top-rated in India / Top things about India
print("\n--- G. Focus: India (top insights) ---")
india = dfw[dfw['primary_country'].str.lower() == 'india']
if india.empty:
    print("No titles with primary_country == 'India' found in dataset.")
else:
    print("Total titles with primary_country == India:", india.shape[0])
    # Top genres in India
    ig = india[col_listed].astype(str).str.split(',').explode().str.strip().value_counts().head(8)
    print("\nTop genres in India:")
    print(ig)
    # Top directors in India
    idirect = india[col_director].astype(str).str.split(',').explode().str.strip().value_counts().head(8)
    print("\nTop directors by title count (India):")
    print(idirect)
    # Most recent Indian releases (by release_year)
    if col_release_year in dfw.columns:
        recent = india.sort_values(by=col_release_year, ascending=False)[[col_title, col_release_year, col_listed]].head(10)
        print("\nMost recent Indian releases (top 10 by release year):")
        display(recent)
    # Longest Indian movies (by duration_mins proxy)
    if 'duration_mins' in india.columns and india['duration_mins'].notna().sum()>0:
        top_long = india.sort_values(by='duration_mins', ascending=False)[[col_title, 'duration_mins']].drop_duplicates().head(10)
        print("\nTop long-duration titles (India) - duration proxy in minutes:")
        print(top_long.to_string(index=False))
    # If there were numeric scores, we would find top-rated — check numeric_rating_col
    if numeric_rating_col:
        print("\nNumeric rating column detected:", numeric_rating_col)
        top_r_india = india.sort_values(by=numeric_rating_col, ascending=False)[[col_title, numeric_rating_col]].head(10)
        print("\nTop by numeric rating (India):")
        display(top_r_india)
    else:
        print("\nNOTE: No numeric review score found in dataset. 'Top-rated' is not available.")
        print("Instead, we used proxies: top genres, directors, most recent releases, and longest titles for India.")

# H. If a numeric score exists: global top-rated and averages by country/genre
if numeric_rating_col:
    print(f"\n--- H. Global Top Rated using numeric column '{numeric_rating_col}' ---")
    # top 10 globally
    top_global = dfw.sort_values(by=numeric_rating_col, ascending=False)[[col_title, 'primary_country', numeric_rating_col]].head(10)
    display(top_global)
    # average rating by country (only countries with >= 10 titles for stability)
    country_counts = dfw['primary_country'].value_counts()
    good_countries = country_counts[country_counts >= 10].index
    avg_by_country = dfw[dfw['primary_country'].isin(good_countries)].groupby('primary_country')[numeric_rating_col].mean().sort_values(ascending=False).head(12)
    print("\nAverage numeric rating by country (countries with >=10 titles):")
    display(avg_by_country)
    # average rating by genre
    gen_df = dfw[[numeric_rating_col, col_listed]].dropna()
    gen_exploded = gen_df[col_listed].str.split(',').explode().str.strip()
    gen_scores = dfw.loc[gen_exploded.index].assign(genre=gen_exploded.values)
    avg_by_genre = gen_scores.groupby('genre')[numeric_rating_col].mean().sort_values(ascending=False).head(12)
    print("\nAverage numeric rating by genre:")
    display(avg_by_genre)
else:
    print("\n--- H. Skipping numeric-score based top-rated analysis (no numeric score column detected). ---")

# I. Save a small report text file with key findings (auto-generated narrative)
report_lines = []
report_lines.append("Netflix analysis auto-report\n")
report_lines.append(f"Total titles in dataset: {dfw.shape[0]}\n")
report_lines.append(f"Top 3 countries by content: {', '.join(list(top_countries.head(3).index))}\n")
report_lines.append(f"Top genres overall: {', '.join(list(top_genres.head(5).index))}\n")
if not india.empty:
    report_lines.append(f"India titles: {india.shape[0]}; top Indian genres: {', '.join(list(ig.head(3).index))}\n")
if numeric_rating_col:
    report_lines.append(f"Numeric score column used: {numeric_rating_col}\n")
else:
    report_lines.append("No numeric ratings column found; used proxies for 'top' analysis.\n")

with open(os.path.join(VIS_DIR, "analysis_report.txt"), "w", encoding="utf-8") as f:
    f.writelines([l if l.endswith("\n") else l+"\n" for l in report_lines])

print("\n--- Done. Visuals saved in folder:", VIS_DIR, " ---")
print("Key visuals: tv_vs_movies_pie.png, top_countries.png, top_genres.png, country_genre_heatmap.png, added_per_year.png (if date_added exists).")
print("\nNext steps suggestions (for LinkedIn post):")
print(fill("- Screenshot 2-3 strongest charts (e.g., Top Countries, Top Genres, India highlights). In the post, write 3 short insights (hook, method, 3 findings, CTA).", 80))

